from bs4 import BeautifulSoup


class Vendor:
    def __init__(self, fileName):
        self.filename = fileName
        self.name = None
        self.pgpLink = None
        self.pgpKey = None
        self.parser = None
        self.itemIds = set()
        self.ratings = dict()
        self.unparsedLinks = set()


    def __repr__(self):
        res = str(self.name) + "[ " + str(self.ratings) + " ] PGP: " + str(self.pgpLink) + " Items: " + str(self.itemIds)
        return res


    def Parse(self):
        with open(self.filename) as inputFile:
            lines = "\n".join(inputFile.readlines())

        self.parser = BeautifulSoup(lines, "lxml")
        self.GetLinks()
        self.FindRatings()
        self.FindPGP()


    def FindPGP(self):
        child = self.parser.find_all(class_="container")[1]
        pgpArea = child.find("textarea")
        self.pgpKey = pgpArea.string


    def FindRatings(self):
        children = self.parser.find_all(class_="container")
        if len(children) is 2:
            # Try to find this vendor's ratings
            ratingsTable = children[1].find(string="Ratings").parent.parent.parent.parent

            self.ratings["positive"] = self._extractRating(ratingsTable, "Positive")
            self.ratings["neutral"] = self._extractRating(ratingsTable, "Neutral")
            self.ratings["negative"] = self._extractRating(ratingsTable, "Negative")
        else:
            print("Parse error: Unable to extract ratings for this vendor.")


    def GetLinks(self):
        children = self.parser.find_all(class_="container")
        for link in children[1].find_all('a', href=True):
            url = link['href']
            dataBit = url.split("/")[2]
            if 'item' in url:
                self.itemIds.add(dataBit)
            elif 'vendor' in url:
                self.name = dataBit
            elif 'pgp' in url:
                self.pgpLink = dataBit
            else:
                self.unparsedLinks.add(url)


    def _extractRating(self, ratingsTable, stringToFind):
        res = None
        positive = ratingsTable.find(string=stringToFind).parent.parent.strings
        for potential in positive:
            if potential != stringToFind:
                res = potential
        return res
